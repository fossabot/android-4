plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf' apply false
    id 'com.mikepenz.aboutlibraries.plugin'
    id 'jacoco'
}

// Only apply Firebase Performance plugin for non-test builds
// This prevents protobuf compatibility issues in test environments
def isTestBuild = gradle.startParameter.taskNames.any { 
    it.contains("Test") || it.contains("test") || it.contains("AndroidTest") || it.contains("connected")
}

if (!isTestBuild) {
    apply plugin: 'com.google.firebase.firebase-perf'
}

android {
    namespace = 'uk.trigpointing.android'
    compileSdk = 36

    defaultConfig {
        applicationId "uk.trigpointing.android"
        minSdk = 27
        targetSdk = 36
        versionCode 40
        versionName "2.0.40"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        def buildTime = new Date().format("yyyy-MM-dd HH:mm:ss")
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        
        // Auth0 manifest placeholders
        manifestPlaceholders = [
            auth0Domain: "trigpointing.eu.auth0.com",
            auth0Scheme: "uk.trigpointing.android"
        ]
    }
    


    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
            // Crashlytics config; harmless if not obfuscating
            firebaseCrashlytics {
                mappingFileUploadEnabled true
                nativeSymbolUploadEnabled true
            }
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    // Show detailed deprecation warnings
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
    
    lint {
        disable 'MissingTranslation'
        baseline = file("lint-baseline.xml")
    }
    
    // Make source sets explicit so IDEs reliably detect classpath
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
        androidTest {
            java.srcDirs = ['src/androidTest/java']
        }
        test {
            java.srcDirs = ['src/test/java']
        }
    }
    
    // Compose setup
    buildFeatures {
        compose = true
        buildConfig = true
    }
    // Compose compiler plugin is added via Kotlin 2.0+; no manual extensionVersion needed
    packagingOptions {
        resources {
            excludes += [
                    '/META-INF/{AL2.0,LGPL2.1}',
                    'META-INF/LICENSE*'
            ]
        }
        // Help with 16KB page size compatibility
        jniLibs {
            useLegacyPackaging = false
        }
    }
}

// Ensure JDK 17 toolchain is used (required by AGP 8.x)
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Jacoco configuration for code coverage
jacoco {
    toolVersion = "0.8.8"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn 'testDebugUnitTest'
    reports {
        xml.required = true
        html.required = true
    }
    
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        '**/databinding/**/*.*',
        '**/generated/**/*.*'
    ]
    
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    
    classDirectories.setFrom(files([javaDebugTree, kotlinDebugTree]))
    sourceDirectories.setFrom(files(['src/main/java', 'src/main/kotlin']))
    executionData.setFrom(fileTree(dir: buildDir, includes: ['outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec']))
}

dependencies {
    // Compose BOM
    implementation platform('androidx.compose:compose-bom:2025.08.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.activity:activity-compose:1.10.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    // Images
    implementation 'io.coil-kt:coil-compose:2.7.0'
    implementation 'io.coil-kt:coil:2.7.0'
    implementation 'androidx.exifinterface:exifinterface:1.4.1'

    // WorkManager for background uploads
    implementation 'androidx.work:work-runtime-ktx:2.10.3'

    // Fragments and lifecycle
    implementation 'androidx.fragment:fragment-ktx:1.8.9'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.2'
    
    // Core KTX for extension functions
    implementation 'androidx.core:core-ktx:1.15.0'

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.browser:browser:1.9.0'
    
    // HTTP client
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'
    
    // JSON parsing
    implementation 'com.google.code.gson:gson:2.11.0'
    
    // Auth0 Android SDK
    implementation 'com.auth0.android:auth0:2.10.2'
    
    // Logging - replacing slf4j-android-1.6.1-RC1.jar
    implementation 'org.slf4j:slf4j-android:1.7.36'
    
    // ACRA for crash reporting - replacing acra-4.2.3.jar
    
    // Maps - we'll need to replace the old maps.jar with Google Maps
    implementation 'com.google.android.gms:play-services-maps:19.2.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    

    implementation 'com.google.firebase:firebase-analytics:23.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:20.0.0'
    
    // Only include Firebase Performance in non-test builds
    // Check if we're building for tests by looking at current task execution
    if (!gradle.startParameter.taskNames.any { 
        it.contains("Test") || it.contains("test") || it.contains("AndroidTest") || it.contains("connected")
    }) {
        implementation 'com.google.firebase:firebase-perf:22.0.0'
    }
    


    // Room for database
    implementation "androidx.room:room-runtime:2.7.2"
    annotationProcessor "androidx.room:room-compiler:2.7.2"
    implementation "androidx.webkit:webkit:1.14.0"
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.19.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.19.2'
    implementation 'org.apache.commons:commons-compress:1.28.0'

    // Testing - Unit Tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    
    // Testing - Android Integration Tests
    androidTestImplementation('androidx.test.ext:junit:1.1.5') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    androidTestImplementation('androidx.test:runner:1.5.2') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    androidTestImplementation('androidx.test:rules:1.5.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    androidTestImplementation('androidx.test.uiautomator:uiautomator:2.2.0') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    
    // Testing - UI Tests (Espresso)
    androidTestImplementation('androidx.test.espresso:espresso-core:3.5.1') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    androidTestImplementation('androidx.test.espresso:espresso-web:3.5.1') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    androidTestImplementation('androidx.test.espresso:espresso-intents:3.5.1') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.5.1') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    
    // Testing - Database
    androidTestImplementation('androidx.room:room-testing:2.4.3') {
        exclude group: 'com.google.firebase', module: 'firebase-perf'
    }
    implementation "com.mikepenz:aboutlibraries:12.2.4"
}

// Generate google-services.json from template using FIREBASE_API_KEY in local.properties
def localPropsFile = rootProject.file('local.properties')
def localProps = new Properties()
if (localPropsFile.exists()) {
    localPropsFile.withInputStream { stream -> localProps.load(stream) }
}

def firebaseApiKey = localProps.getProperty('FIREBASE_API_KEY') ?: System.getenv('FIREBASE_API_KEY')

tasks.register('generateGoogleServicesJson') {
    description = 'Generates app/google-services.json from template and local.properties'
    group = 'build setup'

    inputs.file(file('google-services.template.json'))
    outputs.file(file('google-services.json'))

    doLast {
        if (!firebaseApiKey) {
            throw new GradleException('FIREBASE_API_KEY not found in local.properties or environment')
        }
        def template = file('google-services.template.json').getText('UTF-8')
        def rendered = template.replace('__API_KEY__', firebaseApiKey)
        file('google-services.json').text = rendered
    }
}

// Ensure the file exists before Google Services plugin runs
tasks.matching { it.name == 'preBuild' }.configureEach { dependsOn 'generateGoogleServicesJson' }
// Also ensure all Google Services processing tasks generate the file first
tasks.matching { it.name ==~ /process.+GoogleServices/ }.configureEach { dependsOn 'generateGoogleServicesJson' }

